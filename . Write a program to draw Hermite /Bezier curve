#include <GL/glut.h>
#include <cmath>
#include <iostream>

// Control points for Hermite and Bezier curves
struct Point {
    float x, y;
    Point(float x = 0, float y = 0) : x(x), y(y) {}
};

// Hermite curve function
Point hermiteCurve(float t, Point P0, Point V0, Point P1, Point V1) {
    float h00 = 2 * t * t * t - 3 * t * t + 1;
    float h10 = t * t * t - 2 * t * t + t;
    float h01 = -2 * t * t * t + 3 * t * t;
    float h11 = t * t * t - t * t;

    float x = h00 * P0.x + h10 * V0.x + h01 * P1.x + h11 * V1.x;
    float y = h00 * P0.y + h10 * V0.y + h01 * P1.y + h11 * V1.y;
    return Point(x, y);
}

// Bezier curve function (Cubic Bezier)
Point bezierCurve(float t, Point P0, Point P1, Point P2, Point P3) {
    float b0 = pow(1 - t, 3);
    float b1 = 3 * t * pow(1 - t, 2);
    float b2 = 3 * pow(t, 2) * (1 - t);
    float b3 = pow(t, 3);

    float x = b0 * P0.x + b1 * P1.x + b2 * P2.x + b3 * P3.x;
    float y = b0 * P0.y + b1 * P1.y + b2 * P2.y + b3 * P3.y;
    return Point(x, y);
}

// Function to plot the Hermite curve
void plotHermiteCurve(Point P0, Point V0, Point P1, Point V1) {
    glBegin(GL_LINE_STRIP);
    for (float t = 0; t <= 1.0; t += 0.001) {
        Point p = hermiteCurve(t, P0, V0, P1, V1);
        glVertex2f(p.x, p.y);
    }
    glEnd();
}

// Function to plot the Bezier curve
void plotBezierCurve(Point P0, Point P1, Point P2, Point P3) {
    glBegin(GL_LINE_STRIP);
    for (float t = 0; t <= 1.0; t += 0.001) {
        Point p = bezierCurve(t, P0, P1, P2, P3);
        glVertex2f(p.x, p.y);
    }
    glEnd();
}

// Display function for OpenGL
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Define control points for Hermite curve
    Point P0(0.1, 0.1), V0(0.5, 0.8), P1(0.7, 0.6), V1(0.4, -0.4);

    // Plot Hermite curve
    glColor3f(1.0, 0.0, 0.0);  // Red for Hermite curve
    plotHermiteCurve(P0, V0, P1, V1);

    // Define control points for Bezier curve
    Point P2(0.3, 0.7), P3(0.6, 0.3), P4(0.9, 0.5);

    // Plot Bezier curve
    glColor3f(0.0, 1.0, 0.0);  // Green for Bezier curve
    plotBezierCurve(P0, P2, P3, P4);

    glFlush();
}

// Main function to set up OpenGL window and call display function
int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Hermite and Bezier Curve");

    glClearColor(1.0, 1.0, 1.0, 1.0);  // Set background color to white
    glColor3f(0.0, 0.0, 0.0);          // Set drawing color to black
    glPointSize(2.0);                  // Set point size for curve points

    // Set up an orthogonal projection for 2D
    gluOrtho2D(0.0, 1.0, 0.0, 1.0);   // Set the range for x and y between 0 and 1

    glutDisplayFunc(display);  // Register display callback function

    glutMainLoop();  // Enter the GLUT event processing loop
    return 0;
}
